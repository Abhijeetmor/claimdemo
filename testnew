<?xml version="1.0" encoding="UTF-8"?>

<config xmlns="http://web-harvest.sourceforge.net/schema/1.0/config">
	<include-config code="StatesHashMap" />

	<script>
		login_token_url =
		"http://35.154.116.87:8030/alfresco/service/api/login?u=admin&amp;pw=admin";
		strFilepath = "";
		get_doc_url_api="";
		tokeninfo = "";
	</script>
	<!-- Script to import -->
	<script><![CDATA[
		/* 
		 1.This code downloads pdf from Alfresco using REST API.
		 2.Opens another REST API and fetches response generated by OCR from it.
		 3.From response, it will extract claimxml
		 4.Fetches values from xml string and stores in some variables
		 5.Using above variable values, it logins into ClaimCenter application and creates new claim
		 6.Calls REST API to Update DB table.
		 7.Uploads Document to  newly created claim
		 */
		import org.openqa.selenium.*;

		import org.openqa.selenium.JavascriptExecuter;
		import org.openqa.selenium.support.ui.Select;
		import org.openqa.selenium.remote.DesiredCapabilities;
		import org.openqa.selenium.interactions.Actions;
		import org.openqa.selenium.JavascriptExecutor;
		import java.util.concurrent.TimeUnit;
		import org.webharvest.runtime.variables.NodeVariable;

		import java.io.StringReader;
		import javax.xml.parsers.DocumentBuilder;
		import javax.xml.parsers.DocumentBuilderFactory;
		import org.w3c.dom.CharacterData;
		import org.w3c.dom.Document;
		import org.w3c.dom.Element;
		import org.w3c.dom.Node;
		import org.w3c.dom.NodeList;
		import org.xml.sax.InputSource;

		import com.google.gson.JsonObject;
		import com.google.gson.Gson;
		import com.google.gson.JsonArray;
		import com.google.gson.JsonElement;
		import com.google.gson.JsonParser;
		import java.util.*;

		String strPolicyNum;
		//String strPolicyType="Businessowners";
		String strPolicyType;
		String strLossDate;
		String strEffectiveDate;
		String strExpirationDate;
		String strTypeOfClaim;
		String strInsuredName;
		String strPerson;
		String[] words;
		String[] insuredWords;
		String[] injuredWords;
		String[] injuredAddress;
		String[] witnessWords;
		String[] witnessAddress;
		String[] lossLocationAddr;
		String strFirstName;
		String strLastName;
		String strMobile;
		String strEmail;
		String strPrimaryPhone="Mobile";
		//String strRelation;
		String strRelationInsName_BasicInfo;
		String strLineOfBusiness_ClaimInfo;
		String strDescription_ClaimInfo;
		String strDateOfNotification_ClaimInfo;
		String strAddress1;
		String strAddress2;
		String strCity;
		String strState;
		String strZipCode;
		String strDamageDesc_NewPropertyInc;
		String strLossEstimate_NewPropertyInc;
		String strLossLocation;
		String strClaim;
		String strNewClaimNum;
		String strDescribeInjuries;
		String strWitnessName;
		String strWitnessFirstName;
		String strWitnessLastName;
		String strWitnessAddress;
		String strWitnessContact;
		//String injStateZip;
		//String[] stateZip;
		String injState;
		String injZipcode;
		breakLoop = 1;
		maxLoop = 0;

		String val;
		String valInjured;
		String valWitness;
		String propVal;

		String strPropAddress;
		String[] propLocationAddr;
		String propAddress1;
		String propCity;
		String propState;
		String propZipcode;
		String strFileName;
		String lossLocState;
		isLoginToClaim = true;
		isEmptyClaimProcessingRecords = false;
		bot_wait_org = false;
		//String autoitDriver;
		int i=0;

		boolean login(RemoteWebDriver sDriver,String strUrl,String strUserName,String strPassword)
		{
			boolean flag=false;
			ieDriver=sDriver;

			try {
				ieDriver.get(strUrl);
				ieDriver.findElement(By.name("Login:LoginScreen:LoginDV:username")).sendKeys(new String[]{
					strUserName
				});
				ieDriver.findElement(By.name("Login:LoginScreen:LoginDV:password")).sendKeys(new String[]{
					strPassword
				});
				ieDriver.findElement(By.id("Login:LoginScreen:LoginDV:submit-btnInnerEl")).click();
				flag=true;
			}
			catch(Exception e) {
				flag=false;
			}

			return flag;
		}

		String getCharacterDataFromElement(Element e)
		{
			Node child = e.getFirstChild();
			if (child instanceof CharacterData)
			{
				CharacterData cd = (CharacterData) child;
				return cd.getData();
			}
			return "";
		}

		public String getNodeUserInfo (RemoteWebDriver autoit)
		{
			try
			{
				return (String) autoit.executeScript( "String result=System.getProperty(\"user.name\");\n"
				+ "return result;",
				new String[] { "GROOVY" });
			}
			catch(Exception e)
			{
				log.error("Exception in getNodeUserInfo: "+e);
			}
			return null;
		}


		public boolean deleteNodeFile(RemoteWebDriver autoit,String strFilepath)
		{
			boolean result = false;
			try
			{
				String sampcode = "new File(\""+strFilepath.replace("\\","\\\\").replace("\"", "\\\"")+"\").delete();\n"+
				"return null;";
				autoit.executeScript( sampcode, new String[] { "GROOVY" });
				result = true;
			}
			catch(Exception e)
			{
				log.error("Exception in deleteNodeFile:"+e);
			}
			return result;
		}
	]]></script>

	<selenium-flow>
		<var-def name="getResult">
			<http url="http://35.154.116.87:5003/rest/claimsforprocessing"
				method="get"></http>
		</var-def>
		<script><![CDATA[
			try {

				String strResult=getResult.toString();
				log.warn("Result=================>>>"+strResult);

				if(!"[]".equals(strResult)) {
					claim_list =new ArrayList();
					LinkedHashMap doc_map = new LinkedHashMap();
					JsonArray jsnAr = (JsonArray)new JsonParser().parse(strResult);
					strResultSize = jsnAr.size();
					//Start of Claim For loop
					for(int i=0; i<jsnAr.size(); i++)
					{
						doc_map = new LinkedHashMap();
						bpmId = jsnAr.get(i).getAsJsonObject().get("bpmid").getAsString();
						log.warn("=================BpmId=================>>>"+bpmId);

						xmlString = jsnAr.get(i).getAsJsonObject().get("claimxml").getAsString();

						log.warn("=================All XML Strings=================>>>"+xmlString);
						doc_map.put("bpmid",bpmId);
						doc_map.put("xmlstring",xmlString);

						claim_list.add(doc_map);
					}

					maxLoop = claim_list.size();
					if(maxLoop  > 1)
						bot_wait_org = true;
				}
				else
				{
					isEmptyClaimProcessingRecords = true;
				}

			}
			catch(Exception e)
			{
				log.warn("The Exception is :::::"+e);
			}
		]]></script>
		<selenium name="seleniumDriver" browser="chrome"
			close-on-completion="true" start-in-private="false">
			<script><![CDATA[
				/*
				 val="";
				 valInjured="";
				 valWitness="";
				 propVal="";
				 lossLocState="";
				 strState="";
				 injState="";
				 propState="";
				 */
				//autoitDriver= "autoitDriver"+loopIndex.toint();
				isUpadateDb = false;
				Map rowDetails = (LinkedHashMap)claim_list.get(0);
				row_bpmid = rowDetails.get("bpmid");
				xmlString = rowDetails.get("xmlstring");

				log.warn("=================BpmId in while=================>>>"+row_bpmid);
				log.warn("=================All XML Strings in while=================>>>"+xmlString);
			]]></script>

			<var-def name="get_doc_url_api">
				<http-extended
					url="http://35.154.116.87:5003/rest/document/${row_bpmid}" method="GET">
				</http-extended>
			</var-def>
			<var-def name="login_response_json">
				<json>
					<xml-to-json>
						<http-extended url="${login_token_url}" method="GET">
						</http-extended>
					</xml-to-json>
				</json>
			</var-def>
			<var-def name="tokeninfo">
				<template>
					${login_response_json.getWrappedObject().get(0).getWrappedObject().get("ticket")}
				</template>
			</var-def>
			<script><![CDATA[
				log.warn("tokeninfo=========>>"+tokeninfo);
				token_info = tokeninfo.toString().replaceAll("\"","");
			]]></script>

			<script><![CDATA[
				int slashIndex = get_doc_url_api.toString().lastIndexOf("/");
				//Downloaded filename
				file_name = get_doc_url_api.toString().substring(slashIndex+1,get_doc_url_api.toString().length());
				download_url= get_doc_url_api + "?ticket=" + token_info;
			]]></script>
			<script><![CDATA[
				sDriver = seleniumDriver.getWrappedObject();
				sDriver.get(download_url);
				Thread.sleep(5000);
			]]></script>

			<script><![CDATA[
				String strLossEstimate_NewPropertyInc;

				DocumentBuilder db = DocumentBuilderFactory.newInstance().newDocumentBuilder();
				InputSource is = new InputSource();
				is.setCharacterStream(new StringReader(xmlString));

				Document doc = db.parse(is);

				//Node 1 - policydetail
				NodeList nodes1 = doc.getElementsByTagName("policydetail");

				for (int i = 0; i < nodes1.getLength(); i++)
				{
					Element element = (Element) nodes1.item(i);

					NodeList name = element.getElementsByTagName("polnum");
					Element line1 = (Element) name.item(0);
					strPolicyNum = getCharacterDataFromElement(line1).trim();
					System.out.println("======polnum: " + strPolicyNum);

					NodeList effdt = element.getElementsByTagName("effdt");
					line2 = (Element) effdt.item(0);
					strEffectiveDate = getCharacterDataFromElement(line2).trim();
					System.out.println("=========Effdt: " + strEffectiveDate);

					NodeList expdt = element.getElementsByTagName("expdt");
					line3 = (Element) expdt.item(0);
					strExpirationDate= getCharacterDataFromElement(line3).trim();
					System.out.println("=========Expdt: " + strExpirationDate);

					NodeList lob = element.getElementsByTagName("lob");
					line4 = (Element) lob.item(0);
					String strLob= getCharacterDataFromElement(line4).trim();
					strLineOfBusiness_ClaimInfo = strLob.substring(0,10);
					System.out.println("=========LOB: " + strLineOfBusiness_ClaimInfo);

					NodeList claimtyp = element.getElementsByTagName("claimtyp");
					line5 = (Element) claimtyp.item(0);
					strTypeOfClaim = getCharacterDataFromElement(line5).trim();
					System.out.println("=========Claimtyp: " + strTypeOfClaim);

				}

				//Node 2 - insureddetail
				NodeList nodes2 = doc.getElementsByTagName("insureddetail");

				for (int i = 0; i < nodes2.getLength(); i++)
				{
					Element element = (Element) nodes2.item(i);

					NodeList insuredname = element.getElementsByTagName("insuredname");
					Element line1 = (Element) insuredname.item(0);
					strInsuredName = getCharacterDataFromElement(line1).trim();

					insuredWords = strInsuredName.split("\\s");
					strInsFirstName = insuredWords[0];
					strInsLastName = insuredWords[1];

					System.out.println("======insuredname: " + strInsuredName);
					System.out.println("======strInsFirstName: " + strInsFirstName);
					System.out.println("======strInsLastName: " + strInsLastName);

					NodeList person = element.getElementsByTagName("person");
					line2 = (Element) person.item(0);
					strPerson = getCharacterDataFromElement(line2).trim();
					System.out.println("=========person: " + strPerson);

					words=strPerson.split("\\s");
					fname = words[0];
					lname = words[1];
					System.out.println("======fname: " + fname);
					System.out.println("======lname: " + lname);

					NodeList relation = element.getElementsByTagName("relation");
					line3 = (Element) relation.item(0);
					strRelationInsName_BasicInfo = getCharacterDataFromElement(line3).trim();
					System.out.println("=========relation: " + strRelationInsName_BasicInfo);

					NodeList address1 = element.getElementsByTagName("address1");
					line4 = (Element) address1.item(0);
					strAddress1 = getCharacterDataFromElement(line4).trim();
					System.out.println("=========address1: " + strAddress1);

					NodeList address2 = element.getElementsByTagName("address2");
					line5 = (Element) address2.item(0);
					strAddress2 = getCharacterDataFromElement(line5).trim();
					System.out.println("=========address2: " + strAddress2);

					NodeList city = element.getElementsByTagName("city");
					Element line6 = (Element) city.item(0);
					strCity = getCharacterDataFromElement(line6).trim();
					System.out.println("======city: " + strCity);

					NodeList state = element.getElementsByTagName("state");
					Element line7 = (Element) state.item(0);
					strState = getCharacterDataFromElement(line7).trim();
					System.out.println("======state: " + strState);

					NodeList zipcode = element.getElementsByTagName("zipcode");
					Element line8 = (Element) zipcode.item(0);
					strZipCode = getCharacterDataFromElement(line8).trim();
					System.out.println("======zipcode: " + strZipCode);

					NodeList telnum = element.getElementsByTagName("telnum");
					Element line9 = (Element) telnum.item(0);
					strMobile = getCharacterDataFromElement(line9).trim();
					System.out.println("======telnum: " + strMobile);


					//Email
					NodeList email = element.getElementsByTagName("email");
					Element line10 = (Element) email.item(0);
					strEmail = getCharacterDataFromElement(line10).trim();
					System.out.println("======email: " + strEmail);

				}

				//Node 3 - lossdetail
				NodeList nodes3 = doc.getElementsByTagName("lossdetail");
				for (int i = 0; i < nodes3.getLength(); i++)
				{
					Element element = (Element) nodes3.item(i);


					//Date of notification
					NodeList notificationdt = element.getElementsByTagName("dateofnotification");
					Element line1 = (Element) notificationdt.item(0);
					strDateOfNotice_ClaimInfo = getCharacterDataFromElement(line1).trim();
					System.out.println("======dateofnotification: " + strDateOfNotice_ClaimInfo);

					//Loss date
					NodeList lossdate = element.getElementsByTagName("lossdate");
					Element line2 = (Element) lossdate.item(0);
					strLossDate = getCharacterDataFromElement(line2).trim();
					System.out.println("======lossdate: " + strLossDate);

					//Loss location
					NodeList location = element.getElementsByTagName("location");
					Element line3 = (Element) location.item(0);
					strLossLocation = getCharacterDataFromElement(line3).trim();
					System.out.println("======location: " + strLossLocation);

					//Extract Address1,City, State, Zipcode from location

					lossLocationAddr = strLossLocation.split(",");
					lossLocAddress1 = lossLocationAddr[0].trim();
					lossLocCity = lossLocationAddr[1].trim();
					lossLocState = lossLocationAddr[2].trim();
					/*
					 if(lossLocState.equalsIgnoreCase("CT"))
					 {
					 lossLocState = "Connecticut";     
					 }*/
					val=(String)statesMap.get(lossLocState);
					lossLocState = val;
					lossLocZipcode = lossLocationAddr[3].trim();

					System.out.println("======lossLocAddress1: " + lossLocAddress1);
					System.out.println("======lossLocCity: " + lossLocCity);
					System.out.println("======lossLocState: " + lossLocState);
					System.out.println("======lossLocZipcode: " + lossLocZipcode);

					NodeList description = element.getElementsByTagName("description");
					line4 = (Element) description.item(0);
					strDescription_ClaimInfo = getCharacterDataFromElement(line4).trim();
					System.out.println("=========description: " + strDescription_ClaimInfo);

					NodeList discovery = element.getElementsByTagName("discovery");
					line5 = (Element) discovery.item(0);
					System.out.println("=========discovery: " + getCharacterDataFromElement(line5));

				}

				//Node 4 - propertydetail
				NodeList nodes4 = doc.getElementsByTagName("propertydetail");
				for (int i = 0; i < nodes4.getLength(); i++)
				{
					Element element = (Element) nodes4.item(i);

					//Not updated
					NodeList propaddress = element.getElementsByTagName("propaddress");
					line1 = (Element) propaddress.item(0);
					strPropAddress = getCharacterDataFromElement(line1).trim();
					System.out.println("=========propaddress: " + strPropAddress);
					//*********************************/
					propLocationAddr = strPropAddress.split(",");
					propAddress1 = propLocationAddr[0].trim();
					propCity = propLocationAddr[1].trim();
					propState = propLocationAddr[2].trim();
					propVal=(String)statesMap.get(propState);
					propState = propVal;
					propZipcode = propLocationAddr[3];

					System.out.println("======propAddress1: " + propAddress1);
					System.out.println("======propCity: " + propCity);
					System.out.println("======propState: " + propState);
					System.out.println("======propZipcode: " + propZipcode);
					//*******************************/


					NodeList propdamagedesc = element.getElementsByTagName("propdamagedesc");
					line2 = (Element) propdamagedesc.item(0);
					strDamageDesc_NewPropertyInc = getCharacterDataFromElement(line2).toString();
					System.out.println("=========propdamagedesc: " + strDamageDesc_NewPropertyInc);

					//USD 25,000 -- Remove USD
					NodeList lossestimated = element.getElementsByTagName("lossestimated");
					line3 = (Element) lossestimated.item(0);
					String lossestimatedAmt= getCharacterDataFromElement(line3).trim();


					//Count length of the String
					int lossAmtSize= lossestimatedAmt.length();
					strLossEstimate_NewPropertyInc = lossestimatedAmt.trim().substring(4,lossAmtSize);
					System.out.println("=========lossestimated: " + strLossEstimate_NewPropertyInc);
				}


				//Node 5 - liabdamagedetailsl -- No values provided

				//Node 6 - injureddetail
				NodeList nodes6 = doc.getElementsByTagName("injureddetail");
				for (int i = 0; i < nodes6.getLength(); i++)
				{
					Element element = (Element) nodes6.item(i);

					NodeList injuredname = element.getElementsByTagName("injuredname");
					Element line1 = (Element) injuredname.item(0);
					strInjuredName = getCharacterDataFromElement(line1).trim();
					System.out.println("======Injured name: " + strInjuredName);

					injuredWords = strInjuredName.split("\\s");
					strInjFirstName = injuredWords[0];
					strInjLastName = injuredWords[1];

					System.out.println("======strInjFirstName: " + strInjFirstName);
					System.out.println("======strInjLastName: " + strInjLastName);

					NodeList injuredaddress = element.getElementsByTagName("injuredaddress");
					line2 = (Element) injuredaddress.item(0);
					strInjAddress= getCharacterDataFromElement(line2).trim();
					System.out.println("=========Injured address: " + strInjAddress);

					injuredAddress=strInjAddress.split(",");
					injAddress1 = injuredAddress[0].trim();
					injCity = injuredAddress[1].trim();
					injState = injuredAddress[2].trim();
					valInjured=(String)statesMap.get(injState);
					injState = valInjured;
					//** change here
					/*
					 injStateZip = injuredAddress[2].trim();
					 stateZip=injStateZip.split("\\s");   	
					 injState = stateZip[0];  	
					 valInjured =(String)statesMap.get(injState); 
					 injState = valInjured;	
					 injZipcode = stateZip[1]; */ 
					//*****
					injZipcode=injuredAddress[3].trim();

					System.out.println("======injAddress1: " + injAddress1);
					System.out.println("======injCity: " + injCity);
					System.out.println("======injState: " + injState);
					System.out.println("======injZipcode: " + injZipcode);

					NodeList injurydesc = element.getElementsByTagName("injurydesc");
					line3 = (Element) injurydesc.item(0);
					strDescribeInjuries = getCharacterDataFromElement(line3).trim();
					System.out.println("=========injurydesc: " + strDescribeInjuries);
				}

				//Node 7 - witnessdetails
				NodeList nodes7 = doc.getElementsByTagName("witnessdetail");
				for (int i = 0; i < nodes7.getLength(); i++)
				{
					Element element = (Element) nodes7.item(i);

					NodeList name = element.getElementsByTagName("witnessname");
					Element line1 = (Element) name.item(0);
					strWitnessName = getCharacterDataFromElement(line1).trim();
					System.out.println("====== Witness name: " + strWitnessName);

					witnessWords = strWitnessName.split("\\s");
					strWitnessFirstName = witnessWords[0];
					strWitnessLastName = witnessWords[1];

					System.out.println("====== strWitnessFirstName: " + strWitnessFirstName);
					System.out.println("====== strWitnessLastName: " + strWitnessLastName);


					NodeList address = element.getElementsByTagName("witnessaddress");
					line2 = (Element) address.item(0);
					strWitnessAddress = getCharacterDataFromElement(line2).trim();
					System.out.println("=========Witness address: " + strWitnessAddress);

					witnessAddress = strWitnessAddress.split(",");
					witAddress1 = witnessAddress[0].trim();
					witCity = witnessAddress[1].trim();
					witState = witnessAddress[2].trim();
					valWitness=(String)statesMap.get(witState);
					witState = valWitness;

					witZipcode = witnessAddress[3].trim();

					System.out.println("======witAddress1: " + witAddress1);
					System.out.println("======witCity: " + witCity);
					System.out.println("======witState: " + witState);
					System.out.println("======witZipcode: " + witZipcode);


					NodeList contact = element.getElementsByTagName("witnesscontact");
					Element line3 = (Element) contact.item(0);
					strWitnessContact = getCharacterDataFromElement(line3).trim();
					System.out.println("======Witness contact: " + strWitnessContact);

				}



				String strUrl="http://35.154.116.87:8080/cc/ClaimCenter.do";
				String strUserName="su";
				String strPassword="gw";

				String strPropertyName="New";

				boolean result=false;

				sDriver = seleniumDriver.getWrappedObject();
				sDriver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
				//sDriver.manage().window().maximize();

				/*Login*/
				result = login(sDriver,strUrl,strUserName,strPassword);
				if(result)
				{
					isLoginToClaim = false;
				}
				Thread.sleep(2000);
			]]></script>
			<case>
				<if condition="${!isLoginToClaim}">
					<script><![CDATA[
						WebElement Image = sDriver.findElement(By.id("TabBar:ClaimTab-btnWrap"));

						//Get width of element.
						int ImageWidth = Image.getSize().getWidth();
						System.out.println("Image width Is "+ImageWidth+" pixels");

						//int sizeOfPix = 56;
						int sizeOfPix = ImageWidth - 6;

						Thread.sleep(2000);
						Actions action2 = new Actions(sDriver);
						action2.moveToElement(sDriver.findElement(By.id("TabBar:ClaimTab-btnWrap")),sizeOfPix, 0).click().build().perform();
						Thread.sleep(1000);

						/*Create New Claim */    
						Thread.sleep(1000);
						sDriver.findElement(By.id("TabBar:ClaimTab:ClaimTab_FNOLWizard-textEl")).click();
						Thread.sleep(3000);

						//Create Unverified Policy
						WebElement radioBtnCreatePolicy = sDriver.findElement(By.id("FNOLWizard:FNOLWizard_FindPolicyScreen:ScreenMode_false-inputEl"));
						radioBtnCreatePolicy.click();

						//Policy numaber
						WebElement policyNumber = sDriver.findElement(By.name("FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:PolicyNumber"));
						policyNumber.sendKeys(new String[]{strPolicyNum});

						/* Working upto this */
						//Policy Type
						WebElement policyType =sDriver.findElement(By.id("FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:Type-inputEl"));
						policyType.clear();
						//policyType.sendKeys(new String[]{strPolicyType});
						policyType.sendKeys(new String[]{strLineOfBusiness_ClaimInfo});
						sDriver.getKeyboard().sendKeys(new String[]{Keys.DOWN.toString()+Keys.ENTER.toString()});
						Thread.sleep(3000);

						//Type Of Claim
						if(strTypeOfClaim.equalsIgnoreCase("Liability"))
						{
							WebElement radioBtnTypeOfClaim = sDriver.findElement(By.id("FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:ClaimLossType_option0-inputEl"));
							radioBtnTypeOfClaim.click();
							Thread.sleep(2000);
						}

						//Loss Date -- Update Later
						WebElement lossDate = sDriver.findElement(By.id("FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:Claim_LossDate-inputEl"));
						lossDate.clear();
						lossDate.sendKeys(new String[]{strLossDate});
						Thread.sleep(1000);

						//Effective Date
						WebElement effectiveDate = sDriver.findElement(By.id("FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:NewClaimPolicyGeneralPanelSet:NewClaimPolicyGeneralDV:EffectiveDate-inputEl"));
						effectiveDate.clear();
						effectiveDate.sendKeys(new String[]{strEffectiveDate});
						Thread.sleep(1000);

						//Expiration Date
						WebElement expirationDate = sDriver.findElement(By.id("FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:NewClaimPolicyGeneralPanelSet:NewClaimPolicyGeneralDV:ExpirationDate-inputEl"));
						expirationDate.clear();
						expirationDate.sendKeys(new String[]{strExpirationDate});
						Thread.sleep(1000);

						//Insured - Name --> New Person
						WebElement arrowBtn= sDriver.findElement(By.xpath("//a[@id='FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:NewClaimPolicyGeneralPanelSet:NewClaimPolicyGeneralDV:Insured_Name:Insured_NameMenuIcon']//img[@src='images/app/drop_button.png']"));
						arrowBtn.click();

						//click on New Person
						sDriver.findElement(By.xpath("//span[@id='FNOLWizard:FNOLWizard_FindPolicyScreen:FNOLWizardFindPolicyPanelSet:NewClaimPolicyGeneralPanelSet:NewClaimPolicyGeneralDV:Insured_Name:ClaimNewContactPickerMenuItemSet:NewContactPickerMenuItemSet_NewPerson-textEl']")).click();
						sDriver.getKeyboard().sendKeys(new String[]{Keys.DOWN.toString()+Keys.ENTER.toString()});
						Thread.sleep(2000);

						/*New Person Screen*/

						//First name
						WebElement firstName = sDriver.findElement(By.id("NewContactPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:GlobalPersonNameInputSet:FirstName-inputEl"));
						firstName.sendKeys(new String[]{strInsFirstName});

						//Last name
						WebElement lastName = sDriver.findElement(By.id("NewContactPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:GlobalPersonNameInputSet:LastName-inputEl"));
						lastName.sendKeys(new String[]{strInsLastName});

						//Mobile
						WebElement mobile = sDriver.findElement(By.id("NewContactPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:Cell:GlobalPhoneInputSet:NationalSubscriberNumber-inputEl"));
						mobile.sendKeys(new String[]{strMobile});
						Thread.sleep(2000);

						//Primary phone
						WebElement primaryPhone=sDriver.findElement(By.id("NewContactPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:PrimaryPhone-inputEl"));
						primaryPhone.clear();
						primaryPhone.sendKeys(new String[]{strPrimaryPhone});
						sDriver.getKeyboard().sendKeys(new String[]{Keys.ENTER.toString()});
						Thread.sleep(5000);

						//Email
						WebElement email=sDriver.findElement(By.id("NewContactPopup:ContactDetailScreen:ContactBasicsDV:PersonContactInfoInputSet:Primary-inputEl"));
						email.clear();
						email.sendKeys(new String[]{strEmail});
						sDriver.getKeyboard().sendKeys(new String[]{Keys.ENTER.toString()});
						Thread.sleep(5000);

						//Address 1
						WebElement address1=sDriver.findElement(By.id("NewContactPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine1-inputEl"));
						address1.sendKeys(new String[]{strAddress1});

						//Address 2
						WebElement address2=sDriver.findElement(By.id("NewContactPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine2-inputEl"));
						address2.sendKeys(new String[]{strAddress2});

						//City
						WebElement city=sDriver.findElement(By.id("NewContactPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:City-inputEl"));
						city.sendKeys(new String[]{strCity});

						//State
						WebElement state=sDriver.findElement(By.id("NewContactPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:State-inputEl"));
						state.clear();
						/* 
						 if(strState.equalsIgnoreCase("CT"))
						 {
						 strState = "Connecticut";
						 state.sendKeys(new String[]{strState});
						 }
						 */
						String strState1=(String)statesMap.get(strState);
						state.sendKeys(new String[]{strState1});
						sDriver.getKeyboard().sendKeys(new String[]{Keys.DOWN.toString()+Keys.ENTER.toString()});
						Thread.sleep(2000);

						//Zipcode
						WebElement zipcode=sDriver.findElement(By.id("NewContactPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:PostalCode-inputEl"));
						zipcode.clear();
						zipcode.sendKeys(new String[]{strZipCode});
						sDriver.getKeyboard().sendKeys(new String[]{Keys.ENTER.toString()});
						Thread.sleep(2000);

						//Click on Update button
						sDriver.findElement(By.id("NewContactPopup:ContactDetailScreen:ContactBasicsDV_tb:ContactDetailToolbarButtonSet:CustomUpdateButton-btnInnerEl")).click();
						Thread.sleep(2000);

						//Click Next
						sDriver.findElement(By.id("FNOLWizard:Next-btnInnerEl")).click();
						Thread.sleep(5000);

						/*-----------Step 2 - Basic info Screen ---------------------*/

						//Name

						if(strRelationInsName_BasicInfo.equalsIgnoreCase("Self"))
						{
							WebElement name_BasicInfo=sDriver.findElement(By.id("FNOLWizard:GeneralPropertyWizardStepSet:NewClaimWizard_MainContactsScreen:NewClaimPeopleDV:ReportedBy_Name-inputEl"));
							name_BasicInfo.clear();
							name_BasicInfo.sendKeys(new String[]{strInsFirstName,Keys.SPACE.toString(),strInsLastName});
							Thread.sleep(1000);
							sDriver.getKeyboard().sendKeys(new String[]{Keys.DOWN.toString()+Keys.ENTER.toString()});
							Thread.sleep(500);
						}
						else
						{
							WebElement arrowBtn_BasicInfo=sDriver.findElement(By.xpath("//a[@id='FNOLWizard:GeneralPropertyWizardStepSet:NewClaimWizard_MainContactsScreen:NewClaimPeopleDV:ReportedBy_Name:ReportedBy_NameMenuIcon']"));
							arrowBtn_BasicInfo.click();
							Thread.sleep(500);

							//click on New Person
							sDriver.findElement(By.xpath("//span[@id='FNOLWizard:GeneralPropertyWizardStepSet:NewClaimWizard_MainContactsScreen:NewClaimPeopleDV:ReportedBy_Name:ClaimNewPersonOnlyPickerMenuItemSet:ClaimNewPersonOnlyPickerMenuItemSet_NewPersonMenuItem-textEl']")).click();
							//sDriver.getKeyboard().sendKeys(new String[]{Keys.DOWN.toString()+Keys.ENTER.toString()});
							Thread.sleep(1000);

							//First Name
							WebElement firstName_BasicInfo=sDriver.findElement(By.id("NewContactPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:GlobalPersonNameInputSet:FirstName-inputEl"));
							firstName_BasicInfo.sendKeys(new String[]{fname.toString()});
							Thread.sleep(500);

							//Last Name
							WebElement lastName_BasicInfo=sDriver.findElement(By.id("NewContactPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:GlobalPersonNameInputSet:LastName-inputEl"));
							lastName_BasicInfo.sendKeys(new String[]{lname.toString()});
							Thread.sleep(500);

							//Click on Update
							WebElement update_BasicInfo=sDriver.findElement(By.id("NewContactPopup:ContactDetailScreen:ContactBasicsDV_tb:ContactDetailToolbarButtonSet:CustomUpdateButton"));
							update_BasicInfo.click();
							Thread.sleep(1000);

						}
						//Relation to Insured
						WebElement relationInsName_BasicInfo=sDriver.findElement(By.id("FNOLWizard:GeneralPropertyWizardStepSet:NewClaimWizard_MainContactsScreen:NewClaimPeopleDV:Claim_ReportedByType-inputEl"));
						relationInsName_BasicInfo.clear();
						relationInsName_BasicInfo.sendKeys(new String[]{strRelationInsName_BasicInfo});
						sDriver.getKeyboard().sendKeys(new String[]{Keys.DOWN.toString()+Keys.ENTER.toString()});
						Thread.sleep(1000);

						//Click Next
						WebElement nextBtn=sDriver.findElement(By.xpath("//a[@id='FNOLWizard:Next']"));
						Actions action3 = new Actions(sDriver);
						action3.moveToElement(nextBtn);
						sDriver.getKeyboard().sendKeys(new String[]{Keys.ENTER.toString()});
						Thread.sleep(2000);

						/*-----------Step 3 - Add Claim Info ---------------------*/


						//Click on horizontal splitter if it exists
						WebElement horizontalSplitter_ClaimInfo=sDriver.findElement(By.xpath("//a[@id='southPanel-splitter-collapseEl']"));
						if(horizontalSplitter_ClaimInfo.isDisplayed())
						{
							horizontalSplitter_ClaimInfo.click();
							Thread.sleep(1000);
						}

						//Line Of Business
						WebElement lineOfBusiness_ClaimInfo=sDriver.findElement(By.id("FNOLWizard:GeneralPropertyWizardStepSet:NewClaimWizard_LossDetailsScreen:NewClaimLossDetailsDV:Claim_LOBCode-inputEl"));
						lineOfBusiness_ClaimInfo.clear();
						lineOfBusiness_ClaimInfo.sendKeys(new String[]{strLineOfBusiness_ClaimInfo});
						sDriver.getKeyboard().sendKeys(new String[]{Keys.DOWN.toString()+Keys.ENTER.toString()});
						Thread.sleep(2000);


						//Description
						//sDriver.findElement(By.id("FNOLWizard:GeneralPropertyWizardStepSet:NewClaimWizard_LossDetailsScreen:NewClaimLossDetailsDV:Description-inputEl")).sendKeys(new String[]{strDescription_ClaimInfo});

						//Loss Cause
						WebElement lossCause_ClaimInfo=sDriver.findElement(By.id("FNOLWizard:GeneralPropertyWizardStepSet:NewClaimWizard_LossDetailsScreen:NewClaimLossDetailsDV:Claim_LossCause-inputEl"));
						lossCause_ClaimInfo.clear();
						//lossCause_ClaimInfo.sendKeys(new String[]{strLossCause_ClaimInfo});
						lossCause_ClaimInfo.sendKeys(new String[]{strDescription_ClaimInfo});
						sDriver.getKeyboard().sendKeys(new String[]{Keys.DOWN.toString()+Keys.ENTER.toString()});
						Thread.sleep(1000);

						//Date of Notice
						WebElement dateOfNotice_ClaimInfo = sDriver.findElement(By.id("FNOLWizard:GeneralPropertyWizardStepSet:NewClaimWizard_LossDetailsScreen:NewClaimLossDetailsDV:Notification_ReportedDate-inputEl"));
						dateOfNotice_ClaimInfo.clear();
						dateOfNotice_ClaimInfo.sendKeys(new String[]{strDateOfNotice_ClaimInfo});
						Thread.sleep(2000);

						//Incident Only
						sDriver.findElement(By.id("FNOLWizard:GeneralPropertyWizardStepSet:NewClaimWizard_LossDetailsScreen:NewClaimLossDetailsDV:Status_IncidentReport_false-inputEl")).click();
						Thread.sleep(3000);

						//Loss Location
						/*
						 WebElement lossLocation=sDriver.findElement(By.id("FNOLWizard:GeneralPropertyWizardStepSet:NewClaimWizard_LossDetailsScreen:NewClaimLossDetailsDV:CCAddressInputSet:globalAddressContainer:Address_Picker-inputEl"));
						 lossLocation.click();
						 Thread.sleep(5000);
						 lossLocation.sendKeys(new String[]{strLossLocation,Keys.DOWN.toString()+Keys.ENTER.toString()});
						 String strLossText = lossLocation.getText();
						 Thread.sleep(6000);
						 */
						//*************************************/

						//Address1
						WebElement address1_LossLoc_ClaimInfo= sDriver.findElement(By.id("FNOLWizard:GeneralPropertyWizardStepSet:NewClaimWizard_LossDetailsScreen:NewClaimLossDetailsDV:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine1-inputEl"));
						address1_LossLoc_ClaimInfo.sendKeys(new String[]{lossLocAddress1});
						Thread.sleep(1000);

						//City
						WebElement city_LossLoc_ClaimInfo= sDriver.findElement(By.id("FNOLWizard:GeneralPropertyWizardStepSet:NewClaimWizard_LossDetailsScreen:NewClaimLossDetailsDV:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:City-inputEl"));
						city_LossLoc_ClaimInfo.sendKeys(new String[]{lossLocCity});
						Thread.sleep(1000);

						//State
						WebElement state_LossLoc_ClaimInfo= sDriver.findElement(By.id("FNOLWizard:GeneralPropertyWizardStepSet:NewClaimWizard_LossDetailsScreen:NewClaimLossDetailsDV:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:State-inputEl"));
						state_LossLoc_ClaimInfo.click();
						state_LossLoc_ClaimInfo.clear();
						Thread.sleep(1000);
						state_LossLoc_ClaimInfo.sendKeys(new String[]{lossLocState});
						sDriver.getKeyboard().sendKeys(new String[]{Keys.DOWN.toString()+Keys.ENTER.toString()});
						Thread.sleep(2000);

						//Zipcode
						WebElement zipcode_LossLoc_ClaimInfo= sDriver.findElement(By.id("FNOLWizard:GeneralPropertyWizardStepSet:NewClaimWizard_LossDetailsScreen:NewClaimLossDetailsDV:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:PostalCode-inputEl"));
						zipcode_LossLoc_ClaimInfo.sendKeys(new String[]{lossLocZipcode});
						Thread.sleep(2000);

						//*************************************/
						//Add Property Details
						//Click on Add button
						sDriver.findElement(By.id("FNOLWizard:GeneralPropertyWizardStepSet:NewClaimWizard_LossDetailsScreen:NewClaimLossDetailsDV:EditableFixedPropertyIncidentsLV_tb:Add")).click();
						Thread.sleep(2000);


						/*-------------New Property incident Screen------------------*/

						//Damage Decription
						WebElement damageDesc_NewPropertyInc= sDriver.findElement(By.id("NewFixedPropertyIncidentPopup:NewFixedPropertyIncidentScreen:FixPropIncidentDetailDV:FixedPropertyIncidentDV:Description-inputEl"));
						damageDesc_NewPropertyInc.sendKeys(new String[]{strDamageDesc_NewPropertyInc});

						//Loss Estimate
						WebElement lossEstimate_NewPropertyInc= sDriver.findElement(By.id("NewFixedPropertyIncidentPopup:NewFixedPropertyIncidentScreen:FixPropIncidentDetailDV:FixedPropertyIncidentDV:LossEstimate-inputEl"));
						lossEstimate_NewPropertyInc.sendKeys(new String[]{strLossEstimate_NewPropertyInc});

						//Property Name
						WebElement propertyName=sDriver.findElement(By.id("NewFixedPropertyIncidentPopup:NewFixedPropertyIncidentScreen:FixPropIncidentDetailDV:FixedPropertyIncidentDV:CCAddressInputSet:globalAddressContainer:Address_Picker-inputEl"));
						propertyName.clear();
						propertyName.sendKeys(new String[]{strPropertyName});
						sDriver.getKeyboard().sendKeys(new String[]{Keys.DOWN.toString()+Keys.DOWN.toString()+Keys.ENTER.toString()});
						Thread.sleep(2000);

						//Address1
						WebElement address1_NewPropertyInc= sDriver.findElement(By.id("NewFixedPropertyIncidentPopup:NewFixedPropertyIncidentScreen:FixPropIncidentDetailDV:FixedPropertyIncidentDV:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine1-inputEl"));
						address1_NewPropertyInc.sendKeys(new String[]{propAddress1});

						//City
						WebElement city_NewPropertyInc= sDriver.findElement(By.id("NewFixedPropertyIncidentPopup:NewFixedPropertyIncidentScreen:FixPropIncidentDetailDV:FixedPropertyIncidentDV:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:City-inputEl"));
						city_NewPropertyInc.sendKeys(new String[]{propCity});

						//State
						WebElement state_NewPropertyInc= sDriver.findElement(By.id("NewFixedPropertyIncidentPopup:NewFixedPropertyIncidentScreen:FixPropIncidentDetailDV:FixedPropertyIncidentDV:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:State-inputEl"));
						state_NewPropertyInc.clear();
						state_NewPropertyInc.sendKeys(new String[]{propState});
						sDriver.getKeyboard().sendKeys(new String[]{Keys.DOWN.toString()+Keys.ENTER.toString()});
						Thread.sleep(1000);

						//Zipcode
						WebElement zipcode_NewPropertyInc= sDriver.findElement(By.id("NewFixedPropertyIncidentPopup:NewFixedPropertyIncidentScreen:FixPropIncidentDetailDV:FixedPropertyIncidentDV:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:PostalCode-inputEl"));
						zipcode_NewPropertyInc.sendKeys(new String[]{propZipcode});

						//Click Ok
						sDriver.findElement(By.id("NewFixedPropertyIncidentPopup:NewFixedPropertyIncidentScreen:Update")).click();
						Thread.sleep(5000);

						/*-------------Start : Injuries Screen------------------*/

						//Add btn
						WebElement addBtn_Injuries= sDriver.findElement(By.id("FNOLWizard:GeneralPropertyWizardStepSet:NewClaimWizard_LossDetailsScreen:NewClaimLossDetailsDV:EditableInjuryIncidentsLV_tb:Add"));
						addBtn_Injuries.click();

						//Injured person

						//***************Start :Add New Person - Injuries*******************/
						WebElement arrBtn_Injuries= sDriver.findElement(By.id("NewInjuryIncidentPopup:NewInjuryIncidentScreen:InjuryIncidentDV:Injured_Picker:Injured_PickerMenuIcon"));
						arrBtn_Injuries.click();

						//click New Person
						WebElement newPerson_Injuries= sDriver.findElement(By.id("NewInjuryIncidentPopup:NewInjuryIncidentScreen:InjuryIncidentDV:Injured_Picker:ClaimNewPersonOnlyPickerMenuItemSet:ClaimNewPersonOnlyPickerMenuItemSet_NewPersonMenuItem-itemEl"));
						newPerson_Injuries.click();

						//First name
						WebElement firstInjName = sDriver.findElement(By.id("NewContactPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:GlobalPersonNameInputSet:FirstName-inputEl"));
						firstInjName.sendKeys(new String[]{strInjFirstName});
						Thread.sleep(500);

						//Last name
						WebElement lastInjName = sDriver.findElement(By.id("NewContactPopup:ContactDetailScreen:ContactBasicsDV:PersonNameInputSet:GlobalPersonNameInputSet:LastName-inputEl"));
						lastInjName.sendKeys(new String[]{strInjLastName});
						Thread.sleep(500);

						//Address1
						WebElement address1_Injuries= sDriver.findElement(By.id("NewContactPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine1-inputEl"));
						address1_Injuries.sendKeys(new String[]{injAddress1});
						Thread.sleep(500);

						//City
						WebElement city_Injuries= sDriver.findElement(By.id("NewContactPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:City-inputEl"));
						city_Injuries.sendKeys(new String[]{injCity});
						Thread.sleep(500);

						//State
						WebElement state_Injuries= sDriver.findElement(By.id("NewContactPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:State-inputEl"));
						state_Injuries.clear();
						state_Injuries.sendKeys(new String[]{injState});
						sDriver.getKeyboard().sendKeys(new String[]{Keys.DOWN.toString()+Keys.ENTER.toString()});
						Thread.sleep(1000);

						//Zipcode
						WebElement zipcode_Injuries= sDriver.findElement(By.id("NewContactPopup:ContactDetailScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:PostalCode-inputEl"));
						zipcode_Injuries.sendKeys(new String[]{injZipcode});
						Thread.sleep(500);

						//Click On Update btn
						sDriver.findElement(By.id("NewContactPopup:ContactDetailScreen:ContactBasicsDV_tb:ContactDetailToolbarButtonSet:CustomUpdateButton-btnInnerEl")).click();
						Thread.sleep(500);

						//***************End :Add New Person - Injuries*******************/

						//Describe Injuries
						WebElement describe_Injuries= sDriver.findElement(By.id("NewInjuryIncidentPopup:NewInjuryIncidentScreen:InjuryIncidentDV:InjuryIncidentInputSet:InjuryDescription-inputEl"));
						describe_Injuries.sendKeys(new String[]{strDescribeInjuries});
						Thread.sleep(500);
						//sDriver.getKeyboard().sendKeys(new String[]{Keys.DOWN.toString()+Keys.ENTER.toString()});
						//Thread.sleep(500);

						//Click Ok
						WebElement okBtn_Injuries= sDriver.findElement(By.id("NewInjuryIncidentPopup:NewInjuryIncidentScreen:Update"));
						okBtn_Injuries.click();
						Thread.sleep(2000);

						//Click Next
						WebElement nextBtn_Injuries= sDriver.findElement(By.id("FNOLWizard:Next"));
						nextBtn_Injuries.click();
						Thread.sleep(1000);

						/*-------------End : Injuries Screen------------------*/

						/*------------ Start : Step 4 - Manage Exposures ------*/
						//Click Next
						WebElement nextBtn_Exposures= sDriver.findElement(By.id("FNOLWizard:Next"));
						nextBtn_Exposures.click();
						Thread.sleep(1000);

						/*------------ Start : Step 5 -  Manage Parties invilved------*/

						//************Start :adding witness details********************/
						//Click New Contact
						WebElement newContact_Parties= sDriver.findElement(By.id("FNOLWizard:GeneralPropertyWizardStepSet:NewClaimWizard_PartiesInvolvedScreen:NewClaimPeopleInvolvedDetailedLV_tb:NewClaimWizard_PartiesInvolvedScreen_CreateNewContactButton"));
						newContact_Parties.click();
						Thread.sleep(1000);

						//Click Person
						WebElement person_Parties= sDriver.findElement(By.xpath("//span[text()='Person']"));
						person_Parties.click();
						Thread.sleep(1000);

						//Click Other
						WebElement other_Parties= sDriver.findElement(By.xpath("//span[text()='Other']"));
						other_Parties.click();
						Thread.sleep(1000);

						//********** New Party Involved screen

						//First name
						WebElement firstWitName = sDriver.findElement(By.id("NewClaimWizard_PartyInvolvedPopup:NewClaimWizard_PartyInvolvedScreen:ContactBasicsDV:PersonNameInputSet:GlobalPersonNameInputSet:FirstName-inputEl"));
						firstWitName.sendKeys(new String[]{strWitnessFirstName});

						//Last name
						WebElement lastWitName = sDriver.findElement(By.id("NewClaimWizard_PartyInvolvedPopup:NewClaimWizard_PartyInvolvedScreen:ContactBasicsDV:PersonNameInputSet:GlobalPersonNameInputSet:LastName-inputEl"));
						lastWitName.sendKeys(new String[]{strWitnessLastName});

						//Mobile
						WebElement mobileWitness = sDriver.findElement(By.id("NewClaimWizard_PartyInvolvedPopup:NewClaimWizard_PartyInvolvedScreen:ContactBasicsDV:PersonContactInfoInputSet:Cell:GlobalPhoneInputSet:NationalSubscriberNumber-inputEl"));
						mobileWitness.sendKeys(new String[]{strWitnessContact});

						//Primary phone
						WebElement primaryPhoneWitness=sDriver.findElement(By.id("NewClaimWizard_PartyInvolvedPopup:NewClaimWizard_PartyInvolvedScreen:ContactBasicsDV:PersonContactInfoInputSet:PrimaryPhone-inputEl"));
						primaryPhoneWitness.clear();
						primaryPhoneWitness.sendKeys(new String[]{strPrimaryPhone});
						sDriver.getKeyboard().sendKeys(new String[]{Keys.ENTER.toString()});
						Thread.sleep(5000);

						//Address1
						WebElement address1_Witness= sDriver.findElement(By.id("NewClaimWizard_PartyInvolvedPopup:NewClaimWizard_PartyInvolvedScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:AddressLine1-inputEl"));
						address1_Witness.sendKeys(new String[]{witAddress1});
						Thread.sleep(1000);

						//City
						WebElement city_Witness = sDriver.findElement(By.id("NewClaimWizard_PartyInvolvedPopup:NewClaimWizard_PartyInvolvedScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:City-inputEl"));
						city_Witness.sendKeys(new String[]{witCity});
						Thread.sleep(1000);

						//State
						WebElement state_Witness = sDriver.findElement(By.id("NewClaimWizard_PartyInvolvedPopup:NewClaimWizard_PartyInvolvedScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:State-inputEl"));
						state_Witness.clear();
						state_Witness.sendKeys(new String[]{witState});
						sDriver.getKeyboard().sendKeys(new String[]{Keys.DOWN.toString()+Keys.ENTER.toString()});
						Thread.sleep(1000);

						//Zipcode
						WebElement zipcode_Witness = sDriver.findElement(By.id("NewClaimWizard_PartyInvolvedPopup:NewClaimWizard_PartyInvolvedScreen:ContactBasicsDV:PrimaryAddressInputSet:CCAddressInputSet:globalAddressContainer:globalAddress:GlobalAddressInputSet:PostalCode-inputEl"));
						zipcode_Witness.sendKeys(new String[]{witZipcode});
						Thread.sleep(1000);

						//Click on Add btn
						sDriver.findElement(By.xpath("//span[@id='NewClaimWizard_PartyInvolvedPopup:NewClaimWizard_PartyInvolvedScreen:ContactBasicsDV:ContactBasicsHeaderInputSet:EditableClaimContactRolesLV_tb:Add-btnInnerEl']")).click();
						Thread.sleep(500);

						//Add Role
						String strRoleWitness = "Witness";
						WebElement role_Witness = sDriver.findElement(By.xpath("//tr/td[3]/div"));
						role_Witness.click();
						//role_Witness.sendKeys(new String[]{strRoleWitness});
						sDriver.findElement(By.xpath("//li[text()='Witness']")).click();
						sDriver.getKeyboard().sendKeys(new String[]{Keys.DOWN.toString()+Keys.ENTER.toString()});
						Thread.sleep(3000);

						//Click On Update btn
						sDriver.findElement(By.id("NewClaimWizard_PartyInvolvedPopup:NewClaimWizard_PartyInvolvedScreen:CustomUpdateButton-btnInnerEl")).click();
						Thread.sleep(2000);

						//************End :adding witness details********************/
						//Click Next
						WebElement nextBtn_Parties= sDriver.findElement(By.id("FNOLWizard:Next"));
						nextBtn_Parties.click();
						Thread.sleep(2000);

						/*------------ Start : Step 6 - Documents ------*/
						/*
						 //Click Next 
						 WebElement nextBtn_Documents= sDriver.findElement(By.id("FNOLWizard:Next"));
						 nextBtn_Documents.click();
						 Thread.sleep(3000); 
						 */

						/*------------ Start : Step 7 -  Save and Assign Claim------*/
						//Click Next
						Actions action4 = new Actions(sDriver);
						action4.moveToElement(sDriver.findElement(By.id("FNOLWizard:Next"))).build().perform();
						Thread.sleep(3000);

						WebElement nextBtn_SaveAssignClaim= sDriver.findElement(By.id("FNOLWizard:Next"));
						nextBtn_SaveAssignClaim.click();
						Thread.sleep(5000);

						/*------------ Start : Step 8 -  Review and Save claim------*/
						//Click Finish
						WebElement finishBtn_ReviewSaveClaim= sDriver.findElement(By.id("FNOLWizard:Finish"));
						finishBtn_ReviewSaveClaim.click();
						Thread.sleep(6000);

						/*------------ Start : New Claim Saved------*/
						//Get new Claim num
						WebElement newClaim_NewClaimSaved=sDriver.findElement(By.xpath("//div[@id='NewClaimSaved:NewClaimSavedScreen:NewClaimSavedDV:GoToClaim-inputEl']"));
						strClaim= newClaim_NewClaimSaved.getText();
						log.warn("strClaim ========"+ strClaim);

						strNewClaimNum=strClaim.substring(5, strClaim.indexOf(","));
						//System.out.println("strNewClaimNum ========"+ strNewClaimNum);
					]]></script>

					<var-def name="res">
						<http url="http://35.154.116.87:5003/rest/updateClaimCreationStatus"
							method="post">
							<http-param name="bpmid">
								<template>${row_bpmid}</template>
							</http-param>
							<http-param name="status">RPA_SUCCESS</http-param>
							<http-param name="claimnum">
								<template>${strNewClaimNum}</template>
							</http-param>
						</http>
					</var-def>

					<script><![CDATA[
						log.warn("Update response ========"+ res);
					]]></script>


					<!-- ************Start : Upload Document functionality****************** -->

					<script><![CDATA[
						log.warn("bpmid ========"+ row_bpmid);
						log.warn("strNewClaimNum ========"+ strNewClaimNum);


						//Click on Claim
						Thread.sleep(2000);
						Actions action2 = new Actions(sDriver);
						action2.moveToElement(sDriver.findElement(By.id("TabBar:ClaimTab-btnWrap")),56, 0).click().build().perform();

						WebElement claimNum=sDriver.findElement(By.xpath("//input[@id='TabBar:ClaimTab:ClaimTab_FindClaim-inputEl']"));
						claimNum.sendKeys(new String[]{strNewClaimNum,Keys.ENTER.toString()});
						Thread.sleep(5000);

						Actions action4 = new Actions(sDriver);
						action4.moveToElement(sDriver.findElement(By.xpath("//span[text()='Documents']"))).click().perform();
						Thread.sleep(1000);

						Actions action5 = new Actions(sDriver);
						action5.moveToElement(sDriver.findElement(By.xpath("//span[text()='New Document']"))).click().perform();
						Thread.sleep(2000);

						Actions action6 = new Actions(sDriver);
						action6.moveToElement(sDriver.findElement(By.xpath("//span[text()='Upload Documents']"))).click().perform();
						Thread.sleep(3000);

						Actions action7 = new Actions(sDriver);
						action7.moveToElement(sDriver.findElement(By.id("southPanel-splitter-collapseEl"))).click().perform();
						Thread.sleep(6000);

						//Click Add Files
						Actions action8 = new Actions(sDriver);
						action8.moveToElement(sDriver.findElement(By.xpath("//span[@class='x-btn-inner x-btn-inner-default-small']"))).click().perform();
						Thread.sleep(5000);
					]]></script>


					<!-- Start : AutoIt driver -->

					<selenium name="autoitDriver" browser="autoit"
						close-on-completion="true">
						<script><![CDATA[
							//String strUploadUrl="ClaimForm1.pdf";
							//Downloaded filename
							String space=" ";
							if(file_name.contains("%20"))
							{
								strFileName = file_name.replaceAll("%20", space);
							}
							else
							{
								strFileName = file_name;
							}

							aDriver = autoitDriver.getWrappedObject();
							Thread.sleep(1000);
							String strUploadUrl = "C:\\Users\\"+ getNodeUserInfo(aDriver) +"\\Downloads\\"+strFileName.trim();
							hread.sleep(1000);
							aDriver.switchTo().window("[CLASS:#32770]");
							Thread.sleep(2000);

							WebElement editBox = aDriver.findElement(By.cssSelector("[CLASS:Edit; INSTANCE:1]"));
							editBox.sendKeys(new String[]{strUploadUrl});

							//Click on Open btn
							aDriver.findElement(By.cssSelector("[CLASS:Button; INSTANCE:1]")).click();
							Thread.sleep(3000);
							deleteNodeFile(aDriver,strUploadUrl);
						]]></script>
					</selenium>

					<!-- End : AutoIt driver -->

					<script><![CDATA[
						//String strUploadStatus="Approved";
						//String strUploadDocType="Letter received";
						i++;
						log.warn("Driver======"+sDriver);

						String second_window = sDriver.getWindowHandle();
						System.out.println("second Window Handle is : "+second_window);
						sDriver.switchTo().window(second_window);
						System.out.println("true : ");

						//Click on Status textbox none
						WebElement status=sDriver.findElement(By.xpath("//table[@id='ClaimNewDocumentLinkedWorksheet:UploadDocumentScreen:DocumentDetailsEditLVPanelSet_ref-table']//td[12]"));
						status.click();

						//Select Status as "Approved"
						WebElement approvedElement=sDriver.findElement(By.xpath("//li[text()='Approved']"));
						log.warn("Approved ================="+approvedElement.getText());
						approvedElement.click();
						Thread.sleep(2000);

						//Click on Document Type textbox none
						WebElement docType=sDriver.findElement(By.xpath("//table[@id='ClaimNewDocumentLinkedWorksheet:UploadDocumentScreen:DocumentDetailsEditLVPanelSet_ref-table']//td[14]"));
						docType.click();

						//Select Document Type as "Letter received"
						WebElement docTypeElement=sDriver.findElement(By.xpath("//li[text()='First notice of loss']"));
						log.warn("Letter received ================="+docTypeElement.getText());
						docTypeElement.click();
						Thread.sleep(2000);

						//Click on Update button
						WebElement updateBtn=sDriver.findElement(By.id("ClaimNewDocumentLinkedWorksheet:UploadDocumentScreen:CustomUpdate-btnInnerEl"));
						updateBtn.click();
						Thread.sleep(5000);
						WebElement logoutBtn= sDriver.findElement(By.xpath("//*[@id=':TabLinkMenuButton-btnWrap']"));
						logoutBtn.click();
						Thread.sleep(5000);
						WebElement logoutSuperUserBtn= sDriver.findElement(By.id("TabBar:LogoutTabBarLink-itemEl"));
						logoutSuperUserBtn.click();
						Thread.sleep(5000);
					]]></script>
				</if>
			</case>
		</selenium>
	</selenium-flow>

	<export include-original-data="true">
		<single-column name="is_wait" value="${bot_wait_org}" />
	</export>
</config>
